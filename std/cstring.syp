
import "cstdlib.syp";

alias byte = int8;

alias StrPtr = @const[]int8;

int strlen(StrPtr str);

StrPtr strcpy(StrPtr dest, StrPtr source);

int strcmp(StrPtr lhs, StrPtr rhs);

StrPtr strtok(StrPtr str, StrPtr delimiters);

@void memcpy(@void dest, @void source, int size);

class cstring
{
	struct this {
		@[]int8 ptr;
	}

	this()
	ptr{null}
	{
	}

	#[mangle("this2")]
	this(StrPtr str)
	ptr{null}
	{
		if (!str) {
			ptr = null;
			return;
		}
		auto len = strlen(str);
		ptr = new [len + 1]int8;
		memcpy(ptr, str, len);
		ptr[len] = '\0';
	}

	#[mangle("this3")]
	this($cstring str)
	{
		if (!str.ptr) {
			ptr = null;
			return;
		}
		auto len = strlen(str.ptr);
		ptr = new [len + 1]int8;
		memcpy(ptr, str.ptr, len);
		ptr[len] = '\0';
	}

	int size()
	{
		return ptr ? strlen(ptr) : 0;
	}

	void setRange(StrPtr str, int len)
	{
		if (ptr)
			~this();
		ptr = new [len + 1]int8;
		memcpy(ptr, str, len);
		ptr[len] = '\0';
	}

	#[oper("=")]
	void set(StrPtr str)
	{
		auto len = str ? strlen(str) : 0;
		setRange(str, len);
	}

	#[oper("=")]
	void asgn($cstring str)
	{
		set(str.ptr);
	}

	@this addRange(StrPtr str, int len)
	{
		if (!ptr) {
			setRange(str, len);
			return this;
		}
		auto size = strlen(ptr->as(@[]const int8));
		auto newSize = size + len;
		auto p = new [newSize + 1]int8;
		memcpy(p, ptr, size);
		memcpy(p[size]$, str, len);
		p[newSize] = '\0';
		~this();
		ptr = p;

		return this;
	}

	@this add(StrPtr str)
	{
		addRange(str, strlen(str));
		return this;
	}

	#[mangle("add2")]
	@this add($cstring str)
	{
		add(str.get());
		return this;
	}

	StrPtr get()
	{
		return ptr->as(StrPtr);
	}

	#[oper("==")]
	bool eq(StrPtr other)
	{
		return !strcmp(ptr->as(StrPtr), other);
	}

	~this()
	{
		delete ptr;
	}
}

int toNumber(StrPtr num, @bool error)
{
	auto end = num;
	auto ret = strtol(num, end$, 10);
	if (end == num)
		error @= true;
	return ret;
}

void reverse(@[]byte str, int length)
{
        int start = 0;
        int end = length - 1;
        while (start < end) {
                auto tmp = str[start];
                str[start] = str[end];
                str[end] = tmp;
                start++;
                end--;
        }
}

StrPtr toString(int num)
{
	@[]byte str = new [16]byte;

	if (num == 0) {
		str[0] = '0';
		str[1] = '\0';
		return str;
	}

	bool isNegative = false;
	if (num < 0) {
		isNegative = true;
		num = -num;
	}

	int i = 0;
	while (num != 0) {
		int rem = num % 10;
		str[i++] = rem + '0';
		num /= 10;
	}

	if (isNegative)
		str[i++] = '-';
	str[i] = '\0';

	reverse(str, i);
	return str;
}
