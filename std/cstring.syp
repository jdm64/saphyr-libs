import libc.stdlib;
import libc.string;

class cstring
{
	struct this {
		@[]int8 ptr;
	}

	this()
	ptr{null}
	{
	}

	void init(cstr str)
	{
		if (!str) {
			ptr = null;
			return;
		}
		auto len = strlen(str);
		ptr = new [len + 1]int8;
		memcpy(ptr, str, len);
		ptr[len] = '\0';
	}

	#[mangle("this2")]
	this(cstr str)
	{
		init(str);
	}

	#[mangle("this3")]
	this($cstring str)
	{
		init(str.ptr);
	}

	#[mangle("this4")]
	this(cstr str, bool movePtr)
	ptr{str}
	{
	}

	~this()
	{
		delete ptr;
	}

	int size()
	{
		return ptr ? strlen(ptr) : 0;
	}

	void setRange(cstr str, int len)
	{
		if (ptr)
			~this();
		ptr = new [len + 1]int8;
		memcpy(ptr, str, len);
		ptr[len] = '\0';
	}

	#[oper("=")]
	void set(cstr str)
	{
		auto len = str ? strlen(str) : 0;
		setRange(str, len);
	}

	#[oper("=")]
	void asgn($cstring str)
	{
		set(str.ptr);
	}

	@this addRange(cstr str, int len)
	{
		if (!ptr) {
			setRange(str, len);
			return this;
		}
		auto size = strlen(ptr->as(@[]const int8));
		auto newSize = size + len;
		auto p = new [newSize + 1]int8;
		memcpy(p, ptr, size);
		memcpy(p[size]$, str, len);
		p[newSize] = '\0';
		~this();
		ptr = p;

		return this;
	}

	#[oper("+=")]
	@this add(cstr str)
	{
		addRange(str, strlen(str));
		return this;
	}

	#[mangle("add2"), oper("+=")]
	@this add($cstring str)
	{
		add(str.get());
		return this;
	}

	cstr get()
	{
		return ptr->as(cstr);
	}

	#[oper("==")]
	bool eq(cstr other)
	{
		return !strcmp(ptr->as(cstr), other);
	}

	bool has(cstr str)
	{
		return strstr(ptr, str);
	}

	void replace(int8 from, int8 to)
	{
		auto sz = size();
		for (int i = 0; i < sz; i++) {
			if (ptr[i] == from) {
				ptr[i] = to;
			}
		}
	}

	void trim()
	{
		auto l = size();
		for (int i = l - 1; i >= 0; i--) {
			if (ptr[i] == '\n' || ptr[i] == '\r')
				ptr[i] = '\0';
			else
				break;
		}
	}

	cstr substr(int start, int end)
	{
		auto sz = end - start + 1;
		auto p = new [sz]int8;
		memcpy(p, ptr[start]$, sz);
		p[sz - 1] = '\0';
		return p;
	}
}

int toNumber(cstr num, @bool error)
{
	auto end = num;
	auto ret = strtol(num, end$, 10);
	if (end == num)
		error @= true;
	return ret;
}

void reverse(@[]int8 str, int length)
{
        int start = 0;
        int end = length - 1;
        while (start < end) {
                auto tmp = str[start];
                str[start] = str[end];
                str[end] = tmp;
                start++;
                end--;
        }
}

cstr toString(int num)
{
	@[]int8 str = new [16]int8;

	if (num == 0) {
		str[0] = '0';
		str[1] = '\0';
		return str;
	}

	bool isNegative = false;
	if (num < 0) {
		isNegative = true;
		num = -num;
	}

	int i = 0;
	while (num != 0) {
		int rem = num % 10;
		str[i++] = rem + '0';
		num /= 10;
	}

	if (isNegative)
		str[i++] = '-';
	str[i] = '\0';

	reverse(str, i);
	return str;
}
